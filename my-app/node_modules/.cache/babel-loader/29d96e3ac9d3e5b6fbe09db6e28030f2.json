{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\patil\\\\OneDrive\\\\Desktop\\\\Sites{projects}\\\\reactjs-netflix-clone-main\\\\my-app\\\\src\\\\components\\\\row\\\\index.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useState, useEffect } from 'react';\nimport Youtube from 'react-youtube';\nimport movieTrailer from 'movie-trailer';\nimport axios from '../../axios'; //I have default import here so i can rename variable\n\nimport { Wrapper, Content } from './Row.style';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst IMG_BASE_URL = 'https://image.tmdb.org/t/p/original/';\n\nfunction Row(_ref) {\n  _s();\n\n  let {\n    title,\n    fetchUrl,\n    backdrop\n  } = _ref;\n  const [movies, setMovies] = useState([]);\n  const [trailerUrl, setTrailerUrl] = useState('');\n  useEffect(() => {\n    // const fetchMovie = async() =>{ }\n    async function fetchData() {\n      const request = await axios.get(fetchUrl);\n      setMovies(request.data.results);\n      return request;\n    }\n\n    fetchData();\n  }, [fetchUrl]); // Options for trailer\n\n  const opts = {\n    height: \"420px\",\n    width: \"100%\",\n    playerVars: {\n      autoplay: 1\n    }\n  }; // For Trailer\n\n  const handleClick = movie => {\n    if (trailerUrl) {\n      setTrailerUrl('');\n    } else {\n      movieTrailer((movie === null || movie === void 0 ? void 0 : movie.name) || (movie === null || movie === void 0 ? void 0 : movie.title) || '').then(url => {\n        const urlParams = new URLSearchParams(new URL(url).search);\n        setTrailerUrl(urlParams.get('v'));\n      }).catch(error => console.log(error));\n    }\n\n    console.log(movie.id);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Wrapper, {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Content, {\n      children: movies.map(movie => /*#__PURE__*/_jsxDEV(\"img\", {\n        src: `${IMG_BASE_URL}${backdrop ? movie.backdrop_path : movie.poster_path}`,\n        alt: movie.name,\n        className: `${backdrop && 'large'}`,\n        onClick: () => handleClick(movie),\n        style: {\n          cursor: 'pointer'\n        }\n      }, movie.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"box\",\n      children: trailerUrl && /*#__PURE__*/_jsxDEV(Youtube, {\n        videoId: trailerUrl,\n        opts: opts,\n        className: \"video\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 28\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Row, \"zcdNe0Lr8rip4Oj/qSSLGY8Tl3o=\");\n\n_c = Row;\nexport default Row;\n\nvar _c;\n\n$RefreshReg$(_c, \"Row\");","map":{"version":3,"sources":["C:/Users/patil/OneDrive/Desktop/Sites{projects}/reactjs-netflix-clone-main/my-app/src/components/row/index.js"],"names":["React","useState","useEffect","Youtube","movieTrailer","axios","Wrapper","Content","IMG_BASE_URL","Row","title","fetchUrl","backdrop","movies","setMovies","trailerUrl","setTrailerUrl","fetchData","request","get","data","results","opts","height","width","playerVars","autoplay","handleClick","movie","name","then","url","urlParams","URLSearchParams","URL","search","catch","error","console","log","id","map","backdrop_path","poster_path","cursor"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { useState,useEffect } from 'react';\nimport Youtube from 'react-youtube';\nimport movieTrailer from 'movie-trailer';\n\nimport axios from '../../axios';  //I have default import here so i can rename variable\n\nimport { Wrapper,Content } from './Row.style';\n\nconst IMG_BASE_URL = 'https://image.tmdb.org/t/p/original/';\n\nfunction Row({ title,fetchUrl,backdrop }) {\n\n    const [movies, setMovies] = useState([]);\n    const [trailerUrl, setTrailerUrl] = useState('');\n\n    useEffect(()=>{\n        // const fetchMovie = async() =>{ }\n        async function fetchData() {\n            const request = await axios.get(fetchUrl);\n            setMovies(request.data.results);\n            return request;\n        }\n\n        fetchData();\n    },[fetchUrl]);\n\n    // Options for trailer\n    const opts = {\n        height: \"420px\",\n        width: \"100%\",\n        playerVars: {\n            autoplay: 1,\n        }\n    }\n\n    // For Trailer\n    const handleClick = (movie) =>{\n        if(trailerUrl){\n            setTrailerUrl('');\n        }else{\n            movieTrailer(movie?.name || movie?.title || '')\n            .then((url) => {\n                const urlParams = new URLSearchParams(new URL(url).search);\n                setTrailerUrl(urlParams.get('v'));\n            })\n            .catch((error) => console.log(error))\n        }\n        console.log(movie.id)\n    };\n\n    return(\n        <Wrapper>\n            <h2>{title}</h2>\n\n            <Content>\n                {movies.map(movie => (\n                    <img src={`${IMG_BASE_URL}${backdrop? movie.backdrop_path : movie.poster_path}`} alt={movie.name} key={movie.id} className={`${backdrop && 'large'}`} onClick={()=> handleClick(movie)} style={{cursor:'pointer'}}/>\n                ))}\n            </Content>\n            <div className='box'>\n            {trailerUrl && <Youtube videoId={trailerUrl} opts={opts} className='video'/>}\n            </div>\n        </Wrapper>\n    )\n}\n\nexport default Row;"]},"metadata":{},"sourceType":"module"}